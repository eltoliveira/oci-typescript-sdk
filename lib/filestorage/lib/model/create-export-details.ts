/**
 * File Storage API
 * Use the File Storage service API to manage file systems, mount targets, and snapshots.
For more information, see [Overview of File Storage](/iaas/Content/File/Concepts/filestorageoverview.htm).

 * OpenAPI spec version: 20171215
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Details for creating the export.
 */
export interface CreateExportDetails {
  /**
    * Export options for the new export. If left unspecified,
* defaults to:
* <p>
       [
*          {
*             \"source\" : \"0.0.0.0/0\",
*             \"requirePrivilegedSourcePort\" : false,
*             \"access\": \"READ_WRITE\",
*             \"identitySquash\": \"NONE\",
*             \"anonymousUid\": 65534,
*             \"anonymousGid\": 65534,
*             \"isAnonymousAccessAllowed\": false,
*             \"allowedAuth\": [\"SYS\"]
*           }
*        ]
* <p>
  **Note:** Mount targets do not have Internet-routable IP
*   addresses.  Therefore they will not be reachable from the
*   Internet, even if an associated `ClientOptions` item has
*   a source of `0.0.0.0/0`.
* <p>
  **If set to the empty array then the export will not be
*   visible to any clients.**
* <p>
  The export's `exportOptions` can be changed after creation
*   using the `UpdateExport` operation.
* 
    */
  "exportOptions"?: Array<model.ClientOptions>;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of this export's export set.
   */
  "exportSetId": string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of this export's file system.
   */
  "fileSystemId": string;
  /**
    * Path used to access the associated file system.
* <p>
Avoid entering confidential information.
* <p>
Example: `/mediafiles`
* 
    */
  "path": string;
  /**
   * Whether or not the export should use ID mapping for Unix groups rather than the group list provided within an NFS request's RPC header. When this flag is true the Unix UID from the RPC header is used to retrieve the list of secondary groups from a the ID mapping subsystem. The primary GID is always taken from the RPC header. If ID mapping is not configured, incorrectly configured, unavailable, or cannot be used to determine a list of secondary groups then an empty secondary group list is used for authorization. If the number of groups exceeds the limit of 256 groups, the list retrieved from LDAP is truncated to the first 256 groups read.
   */
  "isIdmapGroupsForSysAuth"?: boolean;
}

export namespace CreateExportDetails {
  export function getJsonObj(obj: CreateExportDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "exportOptions": obj.exportOptions
          ? obj.exportOptions.map(item => {
              return model.ClientOptions.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: CreateExportDetails): object {
    const jsonObj = {
      ...obj,
      ...{
        "exportOptions": obj.exportOptions
          ? obj.exportOptions.map(item => {
              return model.ClientOptions.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
